rd_("AlCreate a new kprobe builder.AoCreate a new kretprobe builder.AlCreate a new kprobe manager.AkCall the callback function.AoReturns the argument unchanged.000000000BaCalls <code>U::from(self)</code>.000000000CdAn enum representing either a kprobe or a kretprobe.BdThe x86_64 implementation of Kprobe.iA kprobe.BoThe CPU register state for x86_64 architecture.CfGet a reference to the data as a <code>dyn Any</code>.AgEnable the probe point.CjA Rust library for dynamic kernel probing (kprobes and \xe2\x80\xa6BkGet the underlying kprobe of the kretprobe.BiGet the function name of the probe point.AhDisable the probe point.BeThe operations available for kprobes.AhThe kretprobe structure.lA kretprobe.BlThe user data associated with a probe point.BkGet the return value from the rax register.BkBuild the kprobe with a specific user data.BdSet the user data for the kretprobe.BdCheck if the probe point is enabled.ChGet the number of kprobes registered at a breakpoint \xe2\x80\xa6CiGet the address of the instruction that should be probed.BbThe basic information of a kprobe.CgThe probe point structure for the current architecture.C`Get the probe point associated with this kprobe.BaGet the probe point of the probe.BfThe callback function type for events.BaInsert a kprobe into the manager.BbCheck if the probe is a kretprobe.BbThe builder for creating a kprobe.AfA manager for kprobes.ChThe address of the instruction that caused the break \xe2\x80\xa6CnThe address of the instruction that caused the single step \xe2\x80\xa6BaRemove a kprobe from the manager.BhThe probe point for x86_64 architecture.CkGet the list of kprobes registered at a breakpoint address.CfGet the list of kprobes registered at a debug address.CmThe address of the instruction that program should return \xe2\x80\xa6AhA list of kprobe points.AbRegister a kprobe.BeThe builder for creating a kretprobe.BgThe type of the probe handler function.AnCall the pre handler function.BmBuild the kprobe with a pre handler function.BiSet the return handler for the kretprobe.AlThe instance of a kretprobe.AoCall the post handler function.AdUnregister a kprobe.BnBuild the kprobe with a post handler function.BnThe auxiliary operations required for kprobes.B`Call the fault handler function.AeRegister a kretprobe.BhSet the entry handler for the kretprobe.9BaCall the event callback function.CjThe address of the instruction that saved the original \xe2\x80\xa6CaBuild the kprobe with an event callback function.0AgUnregister a kretprobe.AjAllocate executable memoryBeRegister the event callback function.0AlDeallocate executable memoryCcRun kprobe which has been registered on the address0ChEnable or disable write permission for the specified \xe2\x80\xa6BgUnregister the event callback function.0BnPop a kretprobe instance from the current taskBoInsert a kretprobe instance to the current task")